{"id":"../node_modules/axios/lib/helpers/composeSignals.js","dependencies":[{"name":"/parcel_blueprint/package.json","includedInParent":true,"mtime":1719935541155},{"name":"/parcel_blueprint/.babelrc","includedInParent":true,"mtime":1718293933214},{"name":"/parcel_blueprint/node_modules/axios/package.json","includedInParent":true,"mtime":1719441469300},{"name":"../cancel/CanceledError.js","loc":{"line":1,"column":26,"index":26},"parent":"/parcel_blueprint/node_modules/axios/lib/helpers/composeSignals.js","resolved":"/parcel_blueprint/node_modules/axios/lib/cancel/CanceledError.js"},{"name":"../core/AxiosError.js","loc":{"line":2,"column":23,"index":79},"parent":"/parcel_blueprint/node_modules/axios/lib/helpers/composeSignals.js","resolved":"/parcel_blueprint/node_modules/axios/lib/core/AxiosError.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _CanceledError = _interopRequireDefault(require(\"../cancel/CanceledError.js\"));\nvar _AxiosError = _interopRequireDefault(require(\"../core/AxiosError.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nconst composeSignals = (signals, timeout) => {\n  let controller = new AbortController();\n  let aborted;\n  const onabort = function (cancel) {\n    if (!aborted) {\n      aborted = true;\n      unsubscribe();\n      const err = cancel instanceof Error ? cancel : this.reason;\n      controller.abort(err instanceof _AxiosError.default ? err : new _CanceledError.default(err instanceof Error ? err.message : err));\n    }\n  };\n  let timer = timeout && setTimeout(() => {\n    onabort(new _AxiosError.default(`timeout ${timeout} of ms exceeded`, _AxiosError.default.ETIMEDOUT));\n  }, timeout);\n  const unsubscribe = () => {\n    if (signals) {\n      timer && clearTimeout(timer);\n      timer = null;\n      signals.forEach(signal => {\n        signal && (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));\n      });\n      signals = null;\n    }\n  };\n  signals.forEach(signal => signal && signal.addEventListener && signal.addEventListener('abort', onabort));\n  const {\n    signal\n  } = controller;\n  signal.unsubscribe = unsubscribe;\n  return [signal, () => {\n    timer && clearTimeout(timer);\n    timer = null;\n  }];\n};\nvar _default = exports.default = composeSignals;"},"sourceMaps":null,"error":null,"hash":"5006392c97cd8e003d05f0b9609b17f3","cacheData":{"env":{}}}