{"id":"../node_modules/axios/lib/adapters/xhr.js","dependencies":[{"name":"/parcel_blueprint/package.json","includedInParent":true,"mtime":1719935541155},{"name":"/parcel_blueprint/.babelrc","includedInParent":true,"mtime":1718293933214},{"name":"/parcel_blueprint/node_modules/axios/package.json","includedInParent":true,"mtime":1719441469300},{"name":"./../utils.js","loc":{"line":1,"column":18,"index":18},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/utils.js"},{"name":"./../core/settle.js","loc":{"line":2,"column":19,"index":54},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/core/settle.js"},{"name":"../defaults/transitional.js","loc":{"line":3,"column":33,"index":110},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/defaults/transitional.js"},{"name":"../core/AxiosError.js","loc":{"line":4,"column":23,"index":164},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/core/AxiosError.js"},{"name":"../cancel/CanceledError.js","loc":{"line":5,"column":26,"index":215},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/cancel/CanceledError.js"},{"name":"../helpers/parseProtocol.js","loc":{"line":6,"column":26,"index":271},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/helpers/parseProtocol.js"},{"name":"../platform/index.js","loc":{"line":7,"column":21,"index":323},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/platform/index.js"},{"name":"../core/AxiosHeaders.js","loc":{"line":8,"column":25,"index":372},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/core/AxiosHeaders.js"},{"name":"../helpers/progressEventReducer.js","loc":{"line":9,"column":33,"index":432},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/helpers/progressEventReducer.js"},{"name":"../helpers/resolveConfig.js","loc":{"line":10,"column":26,"index":496},"parent":"/parcel_blueprint/node_modules/axios/lib/adapters/xhr.js","resolved":"/parcel_blueprint/node_modules/axios/lib/helpers/resolveConfig.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _utils = _interopRequireDefault(require(\"./../utils.js\"));\nvar _settle = _interopRequireDefault(require(\"./../core/settle.js\"));\nvar _transitional = _interopRequireDefault(require(\"../defaults/transitional.js\"));\nvar _AxiosError = _interopRequireDefault(require(\"../core/AxiosError.js\"));\nvar _CanceledError = _interopRequireDefault(require(\"../cancel/CanceledError.js\"));\nvar _parseProtocol = _interopRequireDefault(require(\"../helpers/parseProtocol.js\"));\nvar _index = _interopRequireDefault(require(\"../platform/index.js\"));\nvar _AxiosHeaders = _interopRequireDefault(require(\"../core/AxiosHeaders.js\"));\nvar _progressEventReducer = _interopRequireDefault(require(\"../helpers/progressEventReducer.js\"));\nvar _resolveConfig = _interopRequireDefault(require(\"../helpers/resolveConfig.js\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\nvar _default = exports.default = isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = (0, _resolveConfig.default)(config);\n    let requestData = _config.data;\n    const requestHeaders = _AxiosHeaders.default.from(_config.headers).normalize();\n    let {\n      responseType\n    } = _config;\n    let onCanceled;\n    function done() {\n      if (_config.cancelToken) {\n        _config.cancelToken.unsubscribe(onCanceled);\n      }\n      if (_config.signal) {\n        _config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n    let request = new XMLHttpRequest();\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = _AxiosHeaders.default.from('getAllResponseHeaders' in request && request.getAllResponseHeaders());\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n      (0, _settle.default)(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n      reject(new _AxiosError.default('Request aborted', _AxiosError.default.ECONNABORTED, _config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new _AxiosError.default('Network Error', _AxiosError.default.ERR_NETWORK, _config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || _transitional.default;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new _AxiosError.default(timeoutErrorMessage, transitional.clarifyTimeoutError ? _AxiosError.default.ETIMEDOUT : _AxiosError.default.ECONNABORTED, _config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      _utils.default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!_utils.default.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof _config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', (0, _progressEventReducer.default)(_config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof _config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', (0, _progressEventReducer.default)(_config.onUploadProgress));\n    }\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new _CanceledError.default(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n    const protocol = (0, _parseProtocol.default)(_config.url);\n    if (protocol && _index.default.protocols.indexOf(protocol) === -1) {\n      reject(new _AxiosError.default('Unsupported protocol ' + protocol + ':', _AxiosError.default.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n    // Send the request\n    request.send(requestData || null);\n  });\n};"},"sourceMaps":null,"error":null,"hash":"aad498245d9257b3e19fba4355d834f9","cacheData":{"env":{}}}